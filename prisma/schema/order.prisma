model Order {
  id                 String         @id @default(uuid())
  userId             String
  totalAmount        Float
  firstName          String
  lastName           String
  paymentMethod      PaymentMethod
  status             OrderStatus
  isActive           Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime        @updatedAt
  orderProduct       OrderProduct[]
  address            String
  city               String
  postcode           String
  note               String?
  phone              String
  User               User           @relation(fields: [userId], references: [id])
  Notification       Notification[]
  Payment            Payment[]
  appliedPromotionId String?
  discountAmount     Float?         @default(0)

  @@map("order")
}

model OrderProduct {
  id                String          @id @default(uuid())
  orderId           String
  order             Order           @relation(fields: [orderId], references: [id])
  productId         String
  product           Product         @relation(fields: [productId], references: [id])
  variant           ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId  String?
  quantity          Int
  price             Float           // Price at time of order
  isActive          Boolean         @default(true)

  @@map("order_product")
}

model Payment {
  id                 String        @id @default(uuid())
  user               User          @relation(fields: [userId], references: [id])
  userId             String
  amount             Float
  paymentStatus      PaymentStatus @default(pending)
  transactionId      String
  paymentGatewayData Json?
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime       @updatedAt
  orderId            String? 
  Order              Order?        @relation(fields: [orderId], references: [id])

  @@map("payment")
}
