generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  image            String?
  role             Role?             @default(user)
  phone            String?           @unique
  address          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Blog             Blog[]
  Booking          Booking[]
  Cart             Cart?
  Notification     Notification[]
  orders           Order[]
  Payment          Payment[]
  productQuestions ProductQuestion[]
  productReviews   ProductReview[]
  support_ticket   SupportTicket[]
  reviews          UserReview[]
  Wishlist         Wishlist[]

  @@map("user")
}

model UserFile {
  id          String   @id @default(uuid())
  title       String
  url         String
  asset_id    String
  format      String
  width       Int
  height      Int
  bytes       Int
  description String?  @default("")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("user_files")
}

model Service {
  id          String       @id @default(uuid())
  name        String
  description String?
  image       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Booking     Booking[]
  UserReview  UserReview[]

  @@map("service")
}

model Category {
  id          String        @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  banner      String?
  image       String?
  isFeatured  Boolean       @default(true)
  products    Product[]
  SubCategory SubCategory[]

  @@map("category")
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  banner      String?
  image       String?
  status      Boolean   @default(true)
  products    Product[]

  @@map("brand")
}

model SubCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      Boolean   @default(true)
  products    Product[]
  category    Category  @relation(fields: [categoryId], references: [id])

  @@map("sub_category")
}

model Product {
  id            String             @id @default(uuid())
  name          String
  description   String?
  image         String?
  price         Float?
  brandId       String
  subCategoryId String
  stock         String
  quantity      Int
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  categoryId    String
  unit          String
   variations    ProductVariation[]
  cartItems     CartItem[]
  Notification  Notification[]
  OrderProduct  OrderProduct[]
  brand         Brand            @relation(fields: [brandId], references: [id])
  Category      Category          @relation(fields: [categoryId], references: [id])
  subCategory   SubCategory       @relation(fields: [subCategoryId], references: [id])
  questions     ProductQuestion[]
  reviews       ProductReview[]
  wishlists     Wishlist[]         @relation("ProductToWishlist")
  flashSaleProduct FlashSaleProduct[]
  @@map("product")
}

model ProductVariation {
  id        String   @id @default(uuid())
  name      String
  image     String?
  size      String?
  color     String?
  shape     String?
  material  String?
  stock     String?
  weight    Float?
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String?
  product   Product?  @relation(fields: [productId], references: [id])
}

model ProductReview {
  id        String   @id @default(uuid())
  rating    Float
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("product_review")
}

model ProductQuestion {
  id        String   @id @default(uuid())
  question  String
  answer    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("product_question")
}

model Notification {
  id               String           @id @default(uuid())
  image            String?
  title            String
  status           Boolean          @default(true)
  content          String
  notificationType NotificationType
  isRead           Boolean          @default(false)
  orderId          String?
  productId        String?
  userId           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  order            Order?           @relation(fields: [orderId], references: [id])
  product          Product?         @relation(fields: [productId], references: [id])
  user             User             @relation(fields: [userId], references: [id])

  @@map("notification")
}

model UserReview {
  id        String   @id @default(uuid())
  rating    Int
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serviceId String
  userId    String
  service   Service  @relation(fields: [serviceId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_review")
}

model Booking {
  id        String        @id @default(uuid())
  serviceId String
  userId    String
  date      DateTime
  status    BookingStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  service   Service       @relation(fields: [serviceId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@map("booking")
}


model Blog {
  id         String   @id @default(uuid())
  title      String
  content    String
  image      String?
  authorId   String
  authorName String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id])

  @@map("blog")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@map("cart")
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("cart_item")
}

model Wishlist {
  id        String    @id @default(uuid())
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  products  Product[] @relation("ProductToWishlist")

  @@map("wishlist")
}

model Order {
  id            String         @id @default(uuid())
  userId        String
  totalAmount   Float
  firstName     String
  lastName      String
  paymentMethod PaymentMethod
  status        OrderStatus
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  address       String
  city          String
  postcode      String
  note          String?
  phone         String
  Notification  Notification[]
  User          User           @relation(fields: [userId], references: [id])
  orderProduct  OrderProduct[]
  Payment       Payment[]

  @@map("order")
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_product")
}

model Payment {
  id                 String        @id @default(uuid())
  userId             String
  amount             Float
  paymentStatus      PaymentStatus @default(pending)
  transactionId      String
  paymentGatewayData Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  orderId            String?
  Order              Order?        @relation(fields: [orderId], references: [id])
  user               User          @relation(fields: [userId], references: [id])

  @@map("payment")
}

model SupportTicket {
  id           String       @id @default(uuid())
  userId       String?
  title        String
  description  String
  
  status       TicketStatus
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  ticketNumber Int?
  user         User?        @relation(fields: [userId], references: [id])

  @@map("support_ticket")
}


model FlashSale {
  id         String       @id @default(uuid())
  name       String
  startDate  DateTime
  endDate    DateTime
  discount   Float       
  products   FlashSaleProduct[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("flash_sale")
}

model Banner {
  id        String   @id @default(uuid())
  title    String
  image    String
  type     String
  status   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banner")

}

model Promotion {
  id          String                @id @default(uuid())
  name        String
  description String?
  type        PromotionType
  startDate   DateTime
  endDate     DateTime
  discount    Float
  isActive    Boolean               @default(true)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  image       String?
  conditions  PromotionConditions[]

  @@map("promotion")
}

model PromotionConditions {
  id            String        @id @default(uuid())
  conditionType ConditionType // Enum: product, category, etc.
  value         String
  promotionId   String
  promotion     Promotion     @relation(fields: [promotionId], references: [id])

  @@map("promotion_conditions")
}

model Coupon {
  id          String   @id @default(uuid())
  title       String
  code        String   @unique
  discount    Float // The discount percentage or amount
  discountType DiscountType // Enum: percentage, fixed_amount
  minPurchase Float? // Minimum purchase amount required to use the coupon
  maxDiscount Float? // Maximum discount amount
  startDate   DateTime
  expireDate     DateTime
  status      Boolean  @default(true)
  couponType  CouponType? // Enum: public, private, one_time, etc.

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("coupon")
}



enum NotificationType {
  promotional
  order
  product
  service
}

enum CouponType {
  default
  first_order
}

enum DiscountType {
  percentage
  fixed_amount
}

enum PaymentStatus {
  pending
  succeeded
  failed
  refunded
}

enum PaymentMethod {
  online
  COD
  POS
}

enum Role {
  superadmin
  admin
  user
}

enum OrderStatus {
  pending
  confirmed
  shipped
  delivered
  canceled
}

enum BookingStatus {
  pending
  confirmed
  canceled
  completed
}

enum TicketStatus {
  pending
  in_progress
  resolved
  closed
}

enum PromotionType {
  discount
  flash_sale
  seasonal_offer
}

enum ConditionType {
  minimum_purchase_amount
  specific_products
}

enum FlashSaleStatus {
  pending
  active
  expired
}

enum FlashSaleProduct {
  pending
  active
  expired
}


