generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  image            String?
  role             Role?             @default(user)
  phone            String?           @unique
  address          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reviews          UserReview[]
  orders           Order[]
  Blog             Blog[]
  Booking          Booking[]
  Notification     Notification[]
  Cart             Cart? // New relationship: User's Cart
  Wishlist         Wishlist[] // New relationship: User's Wishlist
  Payment          Payment[] // New relationship: User's Payments
  productReviews   ProductReview[]
  productQuestions ProductQuestion[]

  @@map("user")
}

model UserFile {
  id          String   @id @default(uuid())
  title       String
  url         String
  asset_id    String
  format      String
  width       Int
  height      Int
  bytes       Int
  description String?  @default("")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("user_files")
}

model Service {
  id          String       @id @default(uuid())
  name        String
  description String?
  image       String?
  UserReview  UserReview[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Booking     Booking[]

  @@map("service")
}

model Category {
  id          String        @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  SubCategory SubCategory[]

  @@map("category")
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("brand")
}

model SubCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("sub_category")
}

model Product {
  id            String            @id @default(uuid())
  name          String
  description   String?
  image         String?
  price         Float
  brand         Brand?            @relation(fields: [brandId], references: [id])
  brandId       String?
  subCategory   SubCategory?      @relation(fields: [subCategoryId], references: [id])
  subCategoryId String?
  stock         String?
  quantity      Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  OrderProduct  OrderProduct[]
  Category      Category?         @relation(fields: [categoryId], references: [id])
  categoryId    String?
  cartItems     CartItem[]
  wishlists     Wishlist[]
  reviews       ProductReview[]
  questions     ProductQuestion[]
  Notification  Notification[]

  @@map("product")
}

model ProductReview {
  id        String   @id @default(uuid())
  rating    Int
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("product_review")
}

model ProductQuestion {
  id        String   @id @default(uuid())
  question  String
  answer    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("product_question")
}

model Notification {
  id               String           @id @default(uuid())
  title            String
  content          String
  notificationType NotificationType
  isRead           Boolean          @default(false)
  order            Order?           @relation(fields: [orderId], references: [id]) // For order-related notifications
  orderId          String?
  product          Product?         @relation(fields: [productId], references: [id]) // For product-related notifications
  productId        String?
  user             User?            @relation(fields: [userId], references: [id])
  userId           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("notification")
}

model UserReview {
  id        String   @id @default(uuid())
  rating    Int
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_review")
}

model Booking {
  id        String        @id @default(uuid())
  serviceId String
  service   Service       @relation(fields: [serviceId], references: [id])
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  date      DateTime
  status    BookingStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("booking")
}


model Blog {
  id         String   @id @default(uuid())
  title      String
  content    String
  image      String?
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  authorName String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("blog")
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[] // New relationship: Cart Items

  @@map("cart")
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int

  @@map("cart_item")
}

model Wishlist {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("wishlist")
}

model Order {
  id            String         @id @default(uuid())
  userId        String
  totalAmount   Float
  firstName     String
  lastName      String
  paymentMethod PaymentMethod
  status        OrderStatus
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orderProduct  OrderProduct[]
  address       String
  city          String
  postcode      String
  note          String?
  phone         String
  User          User           @relation(fields: [userId], references: [id])
  Notification  Notification[]
  Payment       Payment[]

  @@map("order")
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  @@map("order_product")
}

model Payment {
  id                 String        @id @default(uuid())
  user               User          @relation(fields: [userId], references: [id])
  userId             String
  amount             Float
  paymentStatus      PaymentStatus @default(pending)
  transactionId      String
  paymentGatewayData Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  orderId            String? // Updated to link to Order
  Order              Order?        @relation(fields: [orderId], references: [id])

  @@map("payment")
}

model SupportTicket {
  id          String       @id @default(uuid())
  userId      String // Reference to the user creating the ticket
  title       String
  description String
  status      TicketStatus // Enum: open, closed, pending, etc.
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("support_ticket")
}

enum TicketStatus {
  open
  closed
  pending
  // Add more statuses as needed
}

model Banner {
  id        String   @id @default(uuid())
  title    String
  image    String
  type     String
  status   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banner")

}

model Promotion {
  id          String                @id @default(uuid())
  name        String
  image       String?
  description String?
  type        PromotionType // Enum: discount, flash_sale, seasonal_offer, etc.
  startDate   DateTime
  endDate     DateTime
  conditions  PromotionConditions[] // Conditions for the promotion (e.g., minimum purchase amount, specific products, etc.)
  discount    Float // Discount value (either percentage or fixed amount)
  isActive    Boolean               @default(true)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  @@map("promotion")
}

model PromotionConditions {
  id            String        @id @default(uuid())
  conditionType ConditionType // Enum: minimum_purchase_amount, specific_products, etc.
  value         String // Condition value (e.g., "$100", "product_id", etc.)
  promotion     Promotion     @relation(fields: [promotionId], references: [id])
  promotionId   String

  @@map("promotion_conditions")
}

enum PromotionType {
  discount
  flash_sale
  seasonal_offer
  // Add more types as needed
}

enum ConditionType {
  minimum_purchase_amount
  specific_products
  // Add more conditions as needed
}

model Coupon {
  id          String   @id @default(uuid())
  title       String
  code        String   @unique
  discount    Float // The discount percentage or amount
  discountType DiscountType // Enum: percentage, fixed_amount
  minPurchase Float? // Minimum purchase amount required to use the coupon
  maxDiscount Float? // Maximum discount amount
  startDate   DateTime
  expireDate     DateTime
  status      Boolean  @default(true)
  couponType  CouponType? // Enum: public, private, one_time, etc.

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("coupon")
}

enum NotificationType {
  promotional
  order
  product
  service
}

enum CouponType {
  default
  first_order
}

enum DiscountType {
  percentage
  fixed_amount
}

enum PaymentStatus {
  pending
  succeeded
  failed
  refunded
}

enum PaymentMethod {
  online
  COD
}

enum Role {
  superadmin
  admin
  user
}

enum OrderStatus {
  pending
  confirmed
  shipped
  delivered
  canceled
}

enum BookingStatus {
  pending
  confirmed
  canceled
  completed
}
